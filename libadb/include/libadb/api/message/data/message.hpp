#pragma once

#include <optional>
#include <string>
#include <variant>
#include <nlohmann/json_fwd.hpp>
#include <libadb/libadb.hpp>
#include <libadb/types/snowflake.hpp>
#include <libadb/types/time.hpp>
#include <libadb/types/nullable.hpp>
#include <libadb/api/user/data/user.hpp>
#include <libadb/api/guild/data/guild-member.hpp>
#include <libadb/api/channel/data/channel-mention.hpp>
#include <libadb/api/channel/data/channel.hpp>
#include <libadb/api/message/data/message-type.hpp>
#include <libadb/api/message/data/message-flags.hpp>
#include <libadb/api/message/data/attachment.hpp>
#include <libadb/api/message/data/embed.hpp>
#include <libadb/api/message/data/reaction.hpp>
#include <libadb/api/message/data/message-activity.hpp>
#include <libadb/api/message/data/message-reference.hpp>
#include <libadb/api/application/data/application.hpp>
#include <libadb/api/interactions/data/message-interaction.hpp>
#include <libadb/api/sticker/data/sticker-item.hpp>
#include <libadb/api/interactions/data/message-component.hpp>

namespace adb::api
{
    /**
     * @brief Message object
     * @details https://discord.com/developers/docs/resources/channel#message-object-message-structure
     */
    struct Message
    {
        /// id of the message
        adb::types::SFID id;
        /// id of the channel the message was sent in
        adb::types::SFID channelId;
        /// id of the guild the message was sent in
        std::optional<adb::types::SFID> guildId;
        /// the author of this message 
        /// not guaranteed to be a valid user
        /// The author object follows the structure of the user object,
        /// but is only a valid user in the case where the message is generated by a user or bot user.
        /// If the message is generated by a webhook, the author object corresponds to the webhook's id, username, and avatar.
        /// You can tell if a message is generated by a webhook by checking for the webhook_id on the message object.
        User author;
        /// member properties for this message's author
        std::optional<GuildMember> guildMember;
        /// contents of the message
        std::string content;
        /// when this message was sent
        adb::types::TimePoint timestamp;
        /// when this message was edited (or null if never)
        adb::types::Nullable<adb::types::TimePoint> editedTimestamp;
        /// whether this was a TTS message
        bool tts;
        /// whether this message mentions everyone
        bool mentionEveryone;
        /// users specifically mentioned in the message
        std::vector<User> mentions;
        /// roles specifically mentioned in this message
        std::vector<adb::types::SFID> mentionRoles;
        /// channels specifically mentioned in this message
        std::optional<std::vector<ChannelMention>> mentionChannels;
        /// any attached files
        std::vector<Attachment> attachments;
        /// any embedded content
        std::vector<Embed> embeds;
        /// reactions to the message
        std::optional<std::vector<Reaction>> reactions;
        /// used for validating a message was sent
        std::optional<std::variant<std::string, int64_t>> nonce;
        /// whether this message is pinned
        bool pinned;
        /// if the message is generated by a webhook, this is the webhook's id
        std::optional<adb::types::SFID> webhookId;
        /// type of message
        MessageType type;
        /// sent with Rich Presence-related chat embeds
        std::optional<MessageActivity> activity;
        /// sent with Rich Presence-related chat embeds
        std::optional<Application> application;
        /// if the message is an Interaction or application-owned webhook, this is the id of the application
        std::optional<adb::types::SFID> applicationId;
        /// data showing the source of a crosspost, channel follow add, pin, or reply message
        std::optional<MessageReference> messageReference;
        /// message flags combined as a bitfield
        std::optional<MessageFlags> flags;
        /// the message associated with the message_reference
        std::optional<adb::types::Nullable<Message>> referencedMessage;
        /// sent if the message is a response to an Interaction
        std::optional<MessageInteraction> interaction;
        /// the thread that was started from this message, includes thread member object
        std::optional<Channel> thread;
        /// sent if the message contains components like buttons, action rows, or other interactive components
        std::optional<std::vector<MessageComponent>> components;
        ///	sent if the message contains stickers
        std::optional<std::vector<StickerItem>> stickerItems;
    };

    LIBADB_API void to_json(nlohmann::json& j, const Message& msg);
    LIBADB_API void from_json(const nlohmann::json& j, Message& msg);
}